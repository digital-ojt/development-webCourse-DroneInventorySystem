#!/bin/bash

# =============================================================================
# Windows用 Pre-commit Hook - 統合静的解析システム
# =============================================================================
# 
# Windows環境 (Git Bash) に最適化されたpre-commitフックです。
# コミット時に統合フォーマット・静的解析を実行し、品質ゲートを制御します。
#
# 除外ブランチ: main, master, develop, release/*, hotfix/*  
# 実行内容: 統合フォーマット + Checkstyle + PMD + SpotBugs
#
# 注意: このスクリプトは実機テストを行っていません。
#       Windows環境での動作確認後、必要に応じて調整してください。
#
# =============================================================================

# エラーハンドリング: 関数内でのみset -eを使用し、メイン処理では明示的に制御
set -o pipefail  # パイプラインのエラーを捕捉

# プロジェクトルート取得
PROJECT_ROOT="$(git rev-parse --show-toplevel)"

# 除外ブランチリスト（静的解析をスキップするブランチ）
SKIP_BRANCHES=(
    "main"
    "master" 
    "master-test"
    "develop"
    "release/*"
    "hotfix/*"
)

# 現在のブランチ名を取得
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

# ログ出力関数
log_info() {
    echo "🔧 $1"
}

log_success() {
    echo "✅ $1"
}

log_warning() {
    echo "⚠️  $1"
}

log_error() {
    echo "❌ $1"
}

log_skip() {
    echo "🔄 $1"
}

log_note() {
    echo "📝 $1"
}

# ブランチ除外チェック
check_branch_exclusion() {
    for skip_branch in "${SKIP_BRANCHES[@]}"; do
        if [[ "$CURRENT_BRANCH" == $skip_branch ]]; then
            log_skip "ブランチ '$CURRENT_BRANCH' は静的解析をスキップします"
            log_success "コミットを続行します（品質チェック無し）"
            exit 0
        fi
    done
}

# Windows環境情報取得
get_windows_info() {
    if command -v systeminfo >/dev/null 2>&1; then
        WINDOWS_VERSION=$(systeminfo 2>/dev/null | grep "OS Name" | cut -d: -f2 | sed 's/^ *//' || echo "Windows (バージョン不明)")
    else
        WINDOWS_VERSION="Windows (Git Bash)"
    fi
}

# Windows固有の環境チェック（重複削除済み）

# エラー時の詳細ガイド表示
show_error_guide() {
    log_error "Pre-commit checks に失敗しました"
    echo ""
    log_info "📋 詳細確認方法（Windows用）:"
    echo ""
    echo "  【Eclipse IDE】"
    echo "    Package Explorer で 'pre-commit-result.txt' を開いてください"
    echo ""
    echo "  【IntelliJ IDEA】"
    echo "    Project toolwindow で 'pre-commit-result.txt' を開いてください"
    echo ""
    echo "  【VS Code】"  
    echo "    Explorer で 'pre-commit-result.txt' を開いてください"
    echo ""
    echo "  【手動実行（Git Bash）】"
    echo "    cd DroneInventorySystem"
    echo "    ../scripts/core/windows/format-and-check.sh"
    echo ""
    echo "  【Windows固有のトラブルシューティング】"
    echo "    - コマンドプロンプトで環境変数確認: echo %JAVA_HOME%"
    echo "    - Windows Defenderの除外設定を確認"
    echo "    - 管理者権限でのChocolatey更新: choco upgrade all"
    echo ""
    log_note "Windows環境での実機テストは未完了です"
    log_info "Windows用 Pre-commit Hook by development-webCourse-DroneInventorySystem"
}

# Windows固有の環境チェック
check_windows_environment() {
    # Git Bash環境確認
    if [ -n "$BASH_VERSION" ]; then
        log_success "Git Bash環境: 確認済み"
    else
        log_warning "Git Bash環境ではない可能性があります"
    fi
    
    # Windows環境確認
    get_windows_info
    log_info "実行環境: $WINDOWS_VERSION"
    
    # 必要なコマンドの存在確認
    local missing_commands=()
    
    if ! command -v java >/dev/null 2>&1; then
        missing_commands+=("java")
    fi
    
    if ! command -v mvn >/dev/null 2>&1 && ! command -v mvn.cmd >/dev/null 2>&1; then
        missing_commands+=("maven")
    fi
    
    if ! command -v node >/dev/null 2>&1; then
        missing_commands+=("node")
    fi
    
    if [ ${#missing_commands[@]} -gt 0 ]; then
        log_warning "以下のコマンドが見つかりません: ${missing_commands[*]}"
        log_note "Windows用セットアップを再実行することを推奨します"
    fi
}

# メイン処理
main() {
    log_info "Windows用 Pre-commit Hook: 統合静的解析システム開始"
    log_note "注意: Windows環境での実機テストは未完了です"
    echo "📍 現在のブランチ: $CURRENT_BRANCH"
    echo "🎨 統合フォーマット: Space→Tab + Prettier Java + Eclipse Formatter"
    echo "🔍 静的解析: Checkstyle + PMD + SpotBugs (JDK 17対応)"
    echo "⚠️  注意: 品質違反が検出された場合、コミットは阻止されます"
    echo ""
    
    # Windows環境チェック
    check_windows_environment
    
    # ブランチ除外チェック
    check_branch_exclusion
    
    # DroneInventorySystemディレクトリに移動
    if [ ! -d "$PROJECT_ROOT/DroneInventorySystem" ]; then
        log_error "DroneInventorySystemディレクトリが見つかりません"
        exit 1
    fi
    
    cd "$PROJECT_ROOT/DroneInventorySystem"
    
    # Windows用統合フォーマット・静的解析スクリプト実行
    log_info "Windows用統合フォーマット・静的解析実行中..."
    
    if [ -f "../scripts/core/windows/format-and-check.sh" ]; then
        # 実行権限確認
        chmod +x "../scripts/core/windows/format-and-check.sh"
        
        # 一時ファイルで実行結果をキャプチャ
        local temp_output="$PROJECT_ROOT/.git/pre-commit-temp-output.log"
        
        # 静的解析スクリプトを実行し、exit codeを保持
        echo "🔧 デバッグ: 静的解析スクリプト実行開始..." >&2
        set +e  # 一時的にエラー時停止を無効化
        ../scripts/core/windows/format-and-check.sh > "$temp_output" 2>&1
        local exit_code=$?
        set -e  # エラー時停止を再有効化
        echo "🔧 デバッグ: 静的解析スクリプト完了 (exit_code=$exit_code)" >&2
        
        # 一時ファイルのサイズ確認
        if [ -f "$temp_output" ]; then
            echo "🔧 デバッグ: 一時ファイルサイズ $(wc -l < "$temp_output") lines" >&2
        else
            echo "❌ デバッグ: 一時ファイルが見つかりません" >&2
        fi
        
        # 結果ファイルを確実に生成（一時ファイルの内容をベースに）
        local result_file="$PROJECT_ROOT/pre-commit-result.txt"
        echo "🔧 デバッグ: 結果ファイル生成開始: $result_file" >&2
        
        # 結果ファイルをまず空にして、段階的に構築
        > "$result_file"
        
        # Windows環境情報を取得
        get_windows_info
        
        # ヘッダー情報を追加
        {
            echo "=== Windows用 Pre-commit Hook 実行結果（詳細版） ==="
            echo "実行時間: $(date)"
            echo "ブランチ: $CURRENT_BRANCH"
            echo "実行環境: $WINDOWS_VERSION"
            echo "Git Bash: $BASH_VERSION"
            echo "Java版: $(java -version 2>&1 | head -n1 || echo 'Java情報取得失敗')"
            echo ""
            echo "=== 実行内容 ==="
            echo "1. Windows用統合フォーマット・静的解析スクリプト実行"
            echo "2. scripts/core/windows/format-and-check.sh"
            echo ""
            echo "=== 実行結果詳細 ==="
        } >> "$result_file"
        
        # 一時ファイルの内容を追加
        if [ -f "$temp_output" ] && [ -s "$temp_output" ]; then
            echo "🔧 デバッグ: 一時ファイル内容を結果ファイルに追加" >&2
            {
                echo ""
                echo "◆ 統合フォーマット・静的解析実行ログ:"
                echo "--- 実行ログ開始 ---"
                cat "$temp_output"
                echo "--- 実行ログ終了 ---"
            } >> "$result_file"
        else
            echo "❌ デバッグ: 一時ファイルが見つからないか空です: $temp_output" >&2
            {
                echo ""
                echo "❌ 一時ファイルが見つからないか空です: $temp_output"
                echo "→ 手動実行: cd DroneInventorySystem && ../scripts/core/windows/format-and-check.sh"
            } >> "$result_file"
        fi
        
        # 実行結果情報を追加
        {
            echo ""
            echo "=== プリコミットフック実行情報 ==="
            echo "実行日時: $(date)"
            echo "ブランチ: $CURRENT_BRANCH"
            echo "Exit Code: $exit_code"
            if [ $exit_code -eq 0 ]; then
                echo "結果: ✅ 全ての品質チェックに合格"
                echo "🎉 コミットが正常に完了しました"
                echo "🌟 Windows環境での実行が成功しました"
            else
                echo "結果: ❌ 品質チェックで問題が検出されました"
                echo "🔧 修正後、再度コミットを実行してください"
                echo ""
                echo "📋 修正ガイド:"
                echo "  - Checkstyle エラー: コーディング規約違反を修正してください"
                echo "  - PMD エラー: コード品質問題を修正してください"
                echo "  - SpotBugs エラー: バグパターンを修正してください"
                echo ""
                echo "📋 詳細確認・手動実行方法:"
                echo "  - 手動実行: cd DroneInventorySystem && ../scripts/core/windows/format-and-check.sh"
                echo "  - ガイド: PRE-COMMIT-GUIDE-WINDOWS.md を参照"
                echo "  - Git Bash環境確認: bash --version"
                echo "  - Java環境確認: java -version"
                echo "  - Maven環境確認: mvn -version"
            fi
        } >> "$result_file"
        
        # 結果ファイルが正常に生成されたか確認
        if [ -f "$result_file" ] && [ -s "$result_file" ]; then
            echo "✅ 結果ファイル生成完了: $result_file ($(wc -l < "$result_file") lines)" >&2
        else
            echo "❌ 結果ファイル生成失敗: $result_file" >&2
            # 最低限のファイルを強制生成
            {
                echo "=== エラー: 結果ファイル生成失敗 ==="
                echo "実行時間: $(date)"
                echo "❌ 結果ファイル生成に失敗しました"
                echo "手動実行: cd DroneInventorySystem && ../scripts/core/windows/format-and-check.sh"
            } > "$result_file"
        fi
        
        echo "🔧 結果ログ生成完了" >&2
        
        # 結果ファイルが確実に生成されたかの最終確認
        echo "🔧 デバッグ: 結果ファイル最終確認中..." >&2
        if [ -f "$result_file" ] && [ -s "$result_file" ]; then
            echo "✅ 結果ファイル最終確認成功: $result_file ($(wc -l < "$result_file") lines)" >&2
        else
            echo "❌ 結果ファイル最終確認失敗: $result_file" >&2
            echo "🔧 緊急時の結果ファイル生成を実行..." >&2
            # 緊急時の最低限ファイル生成
            {
                echo "=== 緊急生成: Pre-commit Hook 結果 ==="
                echo "実行時間: $(date)"
                echo "ブランチ: $CURRENT_BRANCH"
                echo "Exit Code: $exit_code"
                echo ""
                if [ -f "$temp_output" ]; then
                    echo "=== 一時ファイルの内容 ==="
                    cat "$temp_output"
                else
                    echo "❌ 一時ファイルが見つかりません: $temp_output"
                fi
                echo ""
                echo "=== 緊急生成ログ終了 ==="
            } > "$result_file"
            echo "🔧 緊急結果ファイル生成完了: $result_file" >&2
        fi
        
        # exit codeに応じてコミット制御
        echo "🔧 デバッグ: 最終判定開始 (exit_code=$exit_code)" >&2
        if [ $exit_code -eq 0 ]; then
            log_success "Windows用統合静的解析: 全て合格"
            log_success "コミットを続行します"
            log_note "Windows環境での実行が成功しました"
            
            # 結果ファイルの最終確認
            if [ -f "$result_file" ]; then
                echo "✅ 結果ファイル確認: $result_file ($(wc -l < "$result_file") lines)" >&2
            else
                echo "⚠️  結果ファイルが見つかりません（成功時）: $result_file" >&2
            fi
            
            # 成功時に一時ファイルを削除
            rm -f "$temp_output"
            echo "🔧 デバッグ: 成功時の終了処理完了" >&2
            exit 0
        else
            log_error "Windows用統合静的解析: 品質違反が検出されました"
            
            # 結果ファイルの最終確認
            if [ -f "$result_file" ]; then
                echo "✅ 結果ファイル確認: $result_file ($(wc -l < "$result_file") lines)" >&2
            else
                echo "❌ 結果ファイルが見つかりません（エラー時）: $result_file" >&2
                # 緊急時の最低限ファイル生成
                {
                    echo "=== 緊急生成: Pre-commit Hook エラー結果 ==="
                    echo "実行時間: $(date)"
                    echo "ブランチ: $CURRENT_BRANCH"
                    echo "❌ 品質チェックで問題が検出されました"
                    echo "❌ 結果ファイル生成でも問題が発生しました"
                    echo ""
                    echo "手動実行: cd DroneInventorySystem && ../scripts/core/windows/format-and-check.sh"
                    echo "ログ確認: cat .git/pre-commit-temp-output.log"
                } > "$result_file"
                echo "🔧 緊急結果ファイルを生成しました: $result_file" >&2
            fi
            
            show_error_guide
            # エラー時に一時ファイルを削除
            rm -f "$temp_output"
            echo "🔧 デバッグ: エラー時の終了処理完了" >&2
            exit 1
        fi
    else
        log_error "Windows用統合フォーマット・静的解析スクリプトが見つかりません"
        log_error "期待される場所: scripts/core/windows/format-and-check.sh"
        log_note "Windows用セットアップを再実行してください"
        exit 1
    fi
}

# スクリプト実行
main "$@"
